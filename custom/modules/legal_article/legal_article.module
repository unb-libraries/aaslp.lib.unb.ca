<?php

/**
* @file
* Contains legal_article.module.
*/

use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Entity;
use Drupal\node\Entity\Node;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function legal_article_node_presave($entity) {
  // Only apply to legal articles.
  if ($entity->bundle() == 'legal_article') {
    // Get location term ID.
    $lid = $entity->field_location->getValue()[0]['target_id'];
    // Load term if there is one.
    $lterm = !empty($lid) ? Term::load($lid) : NULL;
    // If location term found...
    if (!empty($lterm)) {
      // If location has a parent...
      if (!empty($lterm->parent->getValue())) {
        // Get parent location term ID and populate field.
        $lpid = $lterm->parent->getValue()[0]['target_id'];
        $entity->field_parent_location = $lpid;
      }
      // Otherwise use own location term id as parent.
      else {
        $entity->field_parent_location = $lid;
      }
    }
  }
}

/**
 * Implements hook_preprocess_hook().
 */
function legal_article_preprocess_node__legal_article(&$variables) {
  // Retrieve node ID.
  $nid = $variables['node']->id();
  // Process and render annotations.
  // Recover full article text.
  $article_node = $variables['node'];
  $full_text = !empty($article_node->get('body')->getValue()[0]) ?
    $article_node->get('body')->getValue()[0]['value'] : NULL;

  // Process annotations.
  $full_text = annotate($full_text, 'an');
  // Process editorial annotations.
  $full_text = annotate($full_text, 'ed', TRUE);

  // Retrieve source annotations.
  $src_annos = !empty($article_node->get('field_annotations')->getValue()) ?
    $article_node->get('field_annotations')->getValue() : [];
  // Count source annotations.
  $src_anno_count = count($src_annos);
  // Retrieve editorial annotations.
  $ed_annos = !empty($article_node->get('field_editorial_annotations')->getValue()) ?
    $article_node->get('field_editorial_annotations')->getValue() : [];
  // Merge all annotations.
  $annos = array_merge($src_annos, $ed_annos);

  // Cycle through annotations.
  foreach ($annos as $index => $anno) {
    // Only proceed if a valid term can be loaded.
    $anno_term = Term::load($anno['target_id']);

    if ($anno_term) {
      $anno_val = $anno_term->getName();
      // Mark annotation in full text.
      // Strip punctuation from annotation term.
      $anno_val = preg_replace('/(^[[:punct:]]|[[:punct:]]$)/', '', $anno_val);
      // Search regular expression for annotation.
      // This matches $anno_val, case-insensitive:
      // $pattern = '/(\b\Q' . $anno_val . '\E\b)/mi';
      // This matches the position right after $anno_val, case-insensitive:
      $pattern = '/(?<=' . $anno_val . ')/mi';
      // Annotation index should be aray index + 1.
      $anno_no = $index + 1;

      // If it's a source annotation...
      if ($index < $src_anno_count) {
        $anno_id = "anno-target-$anno_no";
        // Add link to corresponding annotation after matched text.
        $replacement = ' <span class="annotation" id="' . $anno_id .
          '">[<a href="#annotation-' . $anno_no . '">' . $anno_no .
          '</a>]</span>';
      }
      else {
        // Continue annotation count display but id ed annotations separate.
        $ed_anno_no = $anno_no - $src_anno_count;
        $anno_id = 'ed-anno-target-' . $ed_anno_no;
        // Add link to corresponding annotation after matched text.
        $replacement = ' <span class="annotation" id="' . $anno_id .
          '">[<a href="#ed-annotation-' . $ed_anno_no . '">' . $anno_no .
          '</a>]</span>';
      }

      // Make replacement in full text variable. One match (first) only.
      $full_text = preg_replace($pattern, $replacement, $full_text, 1);
    }
  }

  // Update full text field.
  $variables['content']['body'][0]['#text'] = $full_text;
}

function annotate($text, $tag, $alpha = FALSE, $upper = FALSE) {
  // Build regex pattern to match tags.
  $pattern = '#\[' . $tag . '\](.*?)\[\/' . $tag . '\]#s';
  // Scan for annotation tags.
  preg_match_all($pattern, $text, $matches, PREG_SET_ORDER);

  // Process matched annotation tags.
  $annos = [];

  foreach ($matches as $key => $match) {
    // $key starts at zero but we want to number from 1.
    $i = $key + 1;

    // Convert to sequential alphanumeric character if flag is set.
    if ($alpha) {
      // If uppercase flag not set, adding 32 to ASCII number converts to lower.
      if (!$upper) {
        $i += 32;
      }

      // Convert to character.
      $i = chr($i + 64);
    }

    // Replace tag with annotation link.
    $source = "anno-tag-$i";
    $target = "annotation-$i";
    $anchor = "[<a id ='$source' href='#$target'>$i</a>]";
    $text = str_replace($match[0], $anchor, $text);

    // Add annotation entry.
    $annos[] = "
      <li class='anno-tem'><a id='$target' href='#$source'>$i.</a> $match[1].</li>
    ";
  }

  // Append annotations to end of text if any.
  if (!empty($annos)) {
    // Begin list.
    $text .= '<ul class="anno-list">';

    // Append annotations.
    foreach ($annos as $anno) {
      $text .= $anno;
    }

    // Close list.
    $text .= '</ul>';
  }

  return $text;
}

/**
 * Implements hook_theme().
 */
function legal_article_theme($existing, $type, $theme, $path) {
  // Use custom template to display annotations field.
  $theme = [];

  $theme['field__field_annotations'] = [
    'render element' => 'content',
    'base hook' => 'field',
    'template' => 'field--node--field-annotations--legal-article',
    'path' => drupal_get_path('module', 'legal_article') . '/templates',
  ];

  $theme['field__field_editorial_annotations'] = [
    'render element' => 'content',
    'base hook' => 'field',
    'template' => 'field--node--field-editorial-annotations--legal-article',
    'path' => drupal_get_path('module', 'legal_article') . '/templates',
  ];

  return $theme;
}

/**
 * Implements hook_form_alter().
 */
function legal_article_form_alter(&$form, $form_state, $form_id) {
  // Hide revision switch field for legal article create/edit forms.
  if ($form_id == 'node_legal_article_form' or
    $form_id == 'node_legal_article_edit_form') {
      // For theme Seven (from Stable).
      $form['field_revision_switch']['#attributes']['class'][] = 'hidden';
      // For Bootstrap themes.
      $form['field_revision_switch']['#attributes']['class'][] = 'd-none';
    }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function legal_article_form_node_legal_article_edit_form_alter(&$form, $form_state, $form_id) {
  // Add submit handler to the top of the stack.
  array_unshift($form['actions']['submit']['#submit'], 'article_preprocess');;
}

function article_preprocess(&$form, $form_state) {
  // Flip field_revision_switch to force new revision on submit.
  $switch = $form_state->getValue('field_revision_switch')['value'];
  $form_state->setValue('field_revision_switch', ['value' => (int)!$switch]);
}
